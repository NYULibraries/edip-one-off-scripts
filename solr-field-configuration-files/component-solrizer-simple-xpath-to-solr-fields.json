{
    "address/p": {
        "solrFields": [
            "address_teim"
        ]
    },
    "appraisal/p": {
        "solrFields": [
            "appraisal_teim"
        ]
    },
    "bioghist/p": {
        "solrFields": [
            "bioghist_teim"
        ]
    },
    "chronlist/chronitem//text()": {
        "solrFields": [
            "chronlist_teim"
        ],
        "process": "Remove all empty string and `nil` elements from the array"
    },
    "//archdesc/did/unittitle": {
        "solrFields": [
            "collection_sim",
            "collection_ssm",
            "collection_teim"
        ]
    },
    "//archdesc/did/unitid": {
        "solrFields": [
            "collection_unitid_ssm",
            "collection_unitid_teim"
        ]
    },
    "corpname": {
        "solrFields": [
            "corpname_teim",
            "corpname_ssm"
        ]
    },
    "archdesc[@level='collection']/did/origination[@label='creator']/*[name() = 'corpname' or name() = 'famname' or name() = 'persname']": {
        "solrFields": [
            "creator_teim",
            "creator_ssm"
        ]
    },
    "dao/daodesc/p\"": {
        "solrFields": [
            "dao_teim",
            "dao_ssm"
        ]
    },
    "//eadid": {
        "solrFields": [
            "ead_ssi"
        ]
    },
    "famname": {
        "solrFields": [
            "famname_teim",
            "famname_ssm"
        ]
    },
    "function": {
        "solrFields": [
            "function_teim",
            "function_ssm"
        ]
    },
    "genreform": {
        "solrFields": [
            "genreform_teim",
            "genreform_ssm"
        ]
    },
    "geogname": {
        "solrFields": [
            "geogname_teim",
            "geogname_ssm"
        ]
    },
    "archdesc[@level='collection']/did/unittitle": {
        "solrFields": [
            "heading_ssm"
        ]
    },
    "did/langmaterial/language/@langcode": {
        "solrFields": [
            "language_sim",
            "language_ssm"
        ],
        "process": "Translate the first language code into a language name"
    },
    "/c/@level": {
        "solrFields": [
            "level_sim"
        ]
    },
    "//genreform": {
        "solrFields": [
            "material_type_sim",
            "material_type_ssm"
        ],
        "process": "For each element, replace strings matching /|w{1}/ (MARC subfield demarcators) with \"--\", remove `nil` values, and remove duplicates."
    },
    "name": {
        "solrFields": [
            "name_teim",
            "name_ssm"
        ]
    },
    "note": {
        "solrFields": [
            "note_teim",
            "note_ssm"
        ]
    },
    "occupation": {
        "solrFields": [
            "occupation_teim",
            "occupation_ssm"
        ]
    },
    "persname": {
        "solrFields": [
            "persname_teim",
            "persname_ssm"
        ]
    },
    "phystech/p": {
        "solrFields": [
            "phystech_teim"
        ]
    },
    "//geogname": {
        "solrFields": [
            "place_ssm",
            "place_sim"
        ],
        "process": "For each element, replace strings matching /|w{1}/ (MARC subfield demarcators) with \"--\", remove `nil` values, and remove duplicates."
    },
    "/c/@id": {
        "solrFields": [
            "ref_ssi"
        ],
        "process": "First element only, and only if it exists.  Note that there is a \"ref_\" in Terminology but it does produce a Solr field because it has no :index_as and in any case would be overwritten by the `Solrizer.insert_field` call in `SolrEad::Component.to_solr()`"
    },
    "scopecontent/p": {
        "solrFields": [
            "scopecontent_teim"
        ]
    },
    "subject": {
        "solrFields": [
            "subject_teim",
            "subject_ssm"
        ]
    },
    "//*[local-name()='subject' or local-name()='function' or local-name() = 'occupation']": {
        "solrFields": [
            "subject_sim",
            "subject_teim"
        ],
        "process": "Take the node sets, flatten them into an array, and remove `nil` values and duplicates.  For  each element replace strings matching /|w{1}/ (MARC subfield demarcators) with \"--\"."
    },
    "title": {
        "solrFields": [
            "title_teim",
            "title_ssm"
        ]
    },
    "did/unitdate[not(@type)]": {
        "solrFields": [
            "unitdate_teim"
        ]
    },
    "archdesc[@level='collection']/did/unitdate[@type='bulk']": {
        "solrFields": [
            "unitdate_bulk_teim"
        ]
    },
    "did/unitdate/@normal": {
        "solrFields": [
            "unitdate_end_sim",
            "unitdate_end_ssm",
            "unitdate_end_si",
            "unitdate_normal_ssm",
            "unitdate_normal_teim",
            "unitdate_normal_sim",
            "unitdate_start_sim",
            "unitdate_start_ssm",
            "unitdate_start_si"
        ],
        "process": "For each element returned, if the value matches /(\\d{4})\\/(\\d{4})/, take the number on the left of the slash and add to array to be indexed."
    },
    "archdesc[@level='collection']/did/unitdate[@type='inclusive']": {
        "solrFields": [
            "unitdate_inclusive_teim"
        ]
    },
    "did/unitid": {
        "solrFields": [
            "unitid_teim",
            "unitid_ssm"
        ]
    },
    "did/unittitle": {
        "solrFields": [
            "unittitle_ssm",
            "unittitle_teim"
        ],
        "process": "For `unittitle_teim`, no special instructions.  For `unittitle_ssm`: sanitize  (see https://jira.nyu.edu/browse/DLFA-209) and change all EAD tags in the <unittitle> text which have `render` attributes to the appropriate HTML tag using this table: https://github.com/awead/solr_ead/blob/v0.7.5/lib/solr_ead/formatting.rb#L5-L23 and remove the `render` attribute from the tag."
    }
}